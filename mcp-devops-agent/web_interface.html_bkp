<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MCP DevOps Agent - Web Interface v2.0</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary-color: #667eea;
            --secondary-color: #764ba2;
            --success-color: #4CAF50;
            --warning-color: #ff9800;
            --error-color: #f44336;
            --bg-dark: #1a1a2e;
            --bg-light: #ffffff;
            --text-dark: #333333;
            --text-light: #ffffff;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            color: var(--text-light);
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            font-size: 24px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .version-badge {
            background: rgba(255, 255, 255, 0.2);
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: normal;
        }
        
        .server-status {
            display: flex;
            align-items: center;
            gap: 10px;
            background: rgba(255, 255, 255, 0.2);
            padding: 10px 20px;
            border-radius: 25px;
        }
        
        .status-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }
        
        .status-online {
            background: var(--success-color);
            box-shadow: 0 0 10px var(--success-color);
        }
        
        .status-offline {
            background: var(--error-color);
            box-shadow: 0 0 10px var(--error-color);
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.7; transform: scale(0.95); }
        }
        
        .main-container {
            flex: 1;
            display: grid;
            grid-template-columns: 300px 1fr 300px;
            gap: 20px;
            padding: 20px;
            height: calc(100vh - 80px);
        }
        
        .sidebar {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            animation: slideInLeft 0.3s ease;
        }
        
        @keyframes slideInLeft {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        
        .chat-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .chat-header {
            padding: 20px;
            border-bottom: 1px solid #eee;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 15px 15px 0 0;
        }
        
        .context-info {
            display: flex;
            gap: 20px;
            font-size: 14px;
            color: #666;
            margin-top: 10px;
        }
        
        .context-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .context-item span:first-child {
            font-size: 16px;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            max-height: calc(100vh - 300px);
            scroll-behavior: smooth;
        }
        
        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }
        
        .chat-messages::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        
        .chat-messages::-webkit-scrollbar-thumb {
            background: var(--primary-color);
            border-radius: 10px;
        }
        
        .message {
            margin-bottom: 20px;
            display: flex;
            gap: 15px;
            animation: messageSlide 0.3s ease;
        }
        
        @keyframes messageSlide {
            from { transform: translateY(10px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        .message.user {
            flex-direction: row-reverse;
        }
        
        .message.user .message-content {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: 20px 20px 5px 20px;
        }
        
        .message.assistant .message-content {
            background: #f1f3f5;
            border-radius: 20px 20px 20px 5px;
        }
        
        .message.system .message-content {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 10px;
            font-family: 'Courier New', monospace;
            font-size: 12px;
        }
        
        .message-content {
            max-width: 70%;
            padding: 15px 20px;
            word-wrap: break-word;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .message-content code {
            background: rgba(0, 0, 0, 0.1);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
        }
        
        .message-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            flex-shrink: 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        .user .message-avatar {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
        }
        
        .assistant .message-avatar {
            background: var(--success-color);
            color: white;
        }
        
        .system .message-avatar {
            background: var(--warning-color);
            color: white;
        }
        
        .chat-input {
            padding: 20px;
            border-top: 1px solid #eee;
            background: white;
            border-radius: 0 0 15px 15px;
        }
        
        .input-container {
            display: flex;
            gap: 10px;
        }
        
        .input-field {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #e9ecef;
            border-radius: 25px;
            outline: none;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .input-field:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .send-btn {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }
        
        .send-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }
        
        .send-btn:active {
            transform: scale(0.95);
        }
        
        .send-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .sidebar h3 {
            margin-bottom: 15px;
            color: var(--primary-color);
            font-size: 16px;
            font-weight: 600;
        }
        
        .tool-item, .demo-item {
            background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
            border: 1px solid #e9ecef;
            border-radius: 10px;
            padding: 12px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .tool-item:hover, .demo-item:hover {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            transform: translateX(5px);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }
        
        .tool-name {
            font-weight: bold;
            font-size: 14px;
        }
        
        .tool-desc {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
        }
        
        .tool-item:hover .tool-desc, .demo-item:hover .tool-desc {
            color: rgba(255, 255, 255, 0.9);
        }
        
        .quick-actions {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .quick-btn {
            background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
            border: none;
            border-radius: 20px;
            padding: 8px 16px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .quick-btn:hover {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(102, 126, 234, 0.3);
        }
        
        .context-controls {
            background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .context-control {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .context-control label {
            font-weight: 500;
            color: var(--text-dark);
        }
        
        .context-select {
            padding: 6px 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background: white;
            font-size: 13px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .context-select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid var(--primary-color);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-right: 10px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .stats-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            font-size: 13px;
            color: #666;
            border-bottom: 1px solid #f0f0f0;
        }
        
        .stats-item:last-child {
            border-bottom: none;
        }
        
        .stats-value {
            font-weight: 600;
            color: var(--primary-color);
        }
        
        @media (max-width: 1200px) {
            .main-container {
                grid-template-columns: 250px 1fr;
            }
            
            .sidebar:last-child {
                display: none;
            }
        }
        
        @media (max-width: 768px) {
            .main-container {
                grid-template-columns: 1fr;
                padding: 10px;
            }
            
            .sidebar {
                display: none;
            }
            
            .header h1 {
                font-size: 18px;
            }
            
            .version-badge {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>
            🤖 MCP DevOps Agent
            <span class="version-badge">v2.0</span>
        </h1>
        <div class="server-status">
            <div class="status-indicator status-offline" id="statusIndicator"></div>
            <span id="statusText">Connecting...</span>
        </div>
    </div>
    
    <div class="main-container">
        <!-- Left Sidebar - Tools & Context -->
        <div class="sidebar">
            <div class="context-controls">
                <div class="context-control">
                    <label>User:</label>
                    <select class="context-select" id="userSelect">
                        <option value="student">student (viewer)</option>
                        <option value="alice">alice (admin)</option>
                        <option value="bob">bob (operator)</option>
                        <option value="charlie">charlie (viewer)</option>
                        <option value="admin">admin (admin)</option>
                    </select>
                </div>
                <div class="context-control">
                    <label>Namespace:</label>
                    <select class="context-select" id="namespaceSelect">
                        <option value="default">default</option>
                        <option value="demo">demo</option>
                        <option value="kube-system">kube-system</option>
                        <option value="monitoring">monitoring</option>
                    </select>
                </div>
            </div>
            
            <div class="quick-actions">
                <button class="quick-btn" onclick="connectServer()">🔌 Connect</button>
                <button class="quick-btn" onclick="disconnectServer()">❌ Disconnect</button>
                <button class="quick-btn" onclick="clearChat()">🗑️ Clear</button>
                <button class="quick-btn" onclick="showContext()">📋 Context</button>
            </div>
            
            <h3>🔧 Available Tools</h3>
            <div id="toolsList">
                <div class="loading">
                    <div class="spinner"></div>
                    Loading tools...
                </div>
            </div>
        </div>
        
        <!-- Main Chat Area -->
        <div class="chat-container">
            <div class="chat-header">
                <h2>Agent Chat</h2>
                <div class="context-info">
                    <div class="context-item">
                        <span>👤</span>
                        <span id="currentUser">student</span>
                    </div>
                    <div class="context-item">
                        <span>🏠</span>
                        <span id="currentNamespace">default</span>
                    </div>
                    <div class="context-item">
                        <span>💬</span>
                        <span id="messageCount">0 messages</span>
                    </div>
                </div>
            </div>
            
            <div class="chat-messages" id="chatMessages">
                <div class="message system">
                    <div class="message-avatar">⚙️</div>
                    <div class="message-content">
                        <strong>MCP DevOps Agent v2.0 Ready</strong><br><br>
                        Running on Kubernetes 1.30 with Kind 0.23.0<br>
                        Click "Connect" to start the MCP server connection.<br><br>
                        Try asking: "Check cluster health" or "Show me all pods"
                    </div>
                </div>
            </div>
            
            <div class="chat-input">
                <div class="input-container">
                    <input 
                        type="text" 
                        class="input-field" 
                        id="messageInput" 
                        placeholder="Ask about your Kubernetes cluster..."
                        disabled
                    />
                    <button class="send-btn" id="sendBtn" onclick="sendMessage()" disabled>
                        ➤
                    </button>
                </div>
            </div>
        </div>
        
        <!-- Right Sidebar - Demo Scenarios & Stats -->
        <div class="sidebar">
            <h3>🎬 Demo Scenarios</h3>
            <div class="demo-item" onclick="runDemo('cluster-health')">
                <div class="tool-name">Cluster Health Check</div>
                <div class="tool-desc">Check overall cluster status and node health</div>
            </div>
            
            <div class="demo-item" onclick="runDemo('pod-status')">
                <div class="tool-name">Pod Status</div>
                <div class="tool-desc">View all pods in current namespace</div>
            </div>
            
            <div class="demo-item" onclick="runDemo('system-metrics')">
                <div class="tool-name">System Metrics</div>
                <div class="tool-desc">Display CPU and memory usage</div>
            </div>
            
            <div class="demo-item" onclick="runDemo('rbac-demo')">
                <div class="tool-name">RBAC Demo</div>
                <div class="tool-desc">Demonstrate role-based access controls</div>
            </div>
            
            <div class="demo-item" onclick="runDemo('tool-discovery')">
                <div class="tool-name">Tool Discovery</div>
                <div class="tool-desc">Show MCP protocol tool discovery</div>
            </div>
            
            <h3 style="margin-top: 20px;">📊 Session Stats</h3>
            <div style="background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%); padding: 15px; border-radius: 10px;">
                <div class="stats-item">
                    <span>Tools used:</span>
                    <span class="stats-value" id="toolsUsed">0</span>
                </div>
                <div class="stats-item">
                    <span>Cache hits:</span>
                    <span class="stats-value" id="cacheHits">0</span>
                </div>
                <div class="stats-item">
                    <span>Errors:</span>
                    <span class="stats-value" id="errorCount">0</span>
                </div>
                <div class="stats-item">
                    <span>Session time:</span>
                    <span class="stats-value" id="sessionTime">00:00</span>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        // Global state
        let serverConnected = false;
        let messageHistory = [];
        let sessionStartTime = new Date();
        let sessionStats = {
            toolsUsed: 0,
            cacheHits: 0,
            errorCount: 0
        };
        let availableTools = [];
        
        // MCP client that calls server.py via web_server.py /rpc endpoint
        class MCPWebClient {
            constructor() {
                this.connected = false;
                this.tools = [];
                // Use current host and port for flexibility
                this.baseUrl = window.location.origin;
            }
            
            async connect() {
                try {
                    addMessage('system', 'Connecting to MCP server...');
                    
                    // Initialize MCP server
                    const initPayload = {
                        jsonrpc: "2.0",
                        method: "initialize",
                        id: Date.now().toString(),
                        params: {
                            protocolVersion: "2024-11-05",
                            clientInfo: {
                                name: "MCP-Web-Interface",
                                version: "2.0.0"
                            }
                        }
                    };

                    const response = await fetch(`${this.baseUrl}/rpc`, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(initPayload)
                    });

                    const result = await response.json();
                    
                    if (result.error) {
                        throw new Error(result.error.message);
                    }
                    
                    // Discover tools
                    await this.discoverTools();
                    
                    this.connected = true;
                    return true;
                    
                } catch (error) {
                    console.error('Connection failed:', error);
                    throw error;
                }
            }
            
            async discoverTools() {
                const toolsPayload = {
                    jsonrpc: "2.0",
                    method: "tools/list",
                    id: Date.now().toString(),
                    params: {}
                };

                const response = await fetch(`${this.baseUrl}/rpc`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(toolsPayload)
                });

                const result = await response.json();
                
                if (!result.error && result.result && result.result.tools) {
                    this.tools = result.result.tools;
                    console.log('Discovered tools:', this.tools);
                }
            }
            
            disconnect() {
                this.connected = false;
                this.tools = [];
            }
            
            async sendMessage(message) {
                if (!this.connected) {
                    throw new Error("Not connected to MCP server");
                }

                // Determine which tool to call based on message content
                const msg = message.toLowerCase();
                let toolName = "kubernetes_get";
                let toolArgs = {
                    resource_type: "pods",
                    namespace: getCurrentNamespace(),
                    user: getCurrentUser()
                };
                
                // Smart tool selection based on message content
                if (msg.includes('pod')) {
                    toolArgs.resource_type = "pods";
                } else if (msg.includes('service')) {
                    toolArgs.resource_type = "services";
                } else if (msg.includes('deployment')) {
                    toolArgs.resource_type = "deployments";
                } else if (msg.includes('node')) {
                    toolArgs.resource_type = "nodes";
                } else if (msg.includes('configmap')) {
                    toolArgs.resource_type = "configmaps";
                } else if (msg.includes('secret')) {
                    toolArgs.resource_type = "secrets";
                } else if (msg.includes('metric') || msg.includes('cpu') || msg.includes('memory')) {
                    toolName = "prometheus_query";
                    toolArgs = {
                        query: "cpu_usage_percent",
                        time_range: "5m",
                        user: getCurrentUser()
                    };
                } else if (msg.includes('log')) {
                    toolName = "logs_search";
                    toolArgs = {
                        query: "error",
                        namespace: getCurrentNamespace(),
                        limit: 100,
                        user: getCurrentUser()
                    };
                } else if (msg.includes('context') || msg.includes('session')) {
                    toolName = "system_context";
                    toolArgs = {
                        session_id: "web-" + Date.now()
                    };
                }

                const payload = {
                    jsonrpc: "2.0",
                    method: "tools/call",
                    id: Date.now().toString(),
                    params: {
                        name: toolName,
                        arguments: toolArgs
                    }
                };

                const response = await fetch(`${this.baseUrl}/rpc`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                
                if (result.error) {
                    throw new Error(result.error.message);
                }
                
                // Parse the result
                let responseText = "⚠️ No response from server";
                let cached = false;
                
                if (result.result && result.result.content && result.result.content[0]) {
                    const content = result.result.content[0].text;
                    const parsedContent = JSON.parse(content);
                    
                    if (parsedContent.success) {
                        // Format the response based on tool type
                        if (toolName === "kubernetes_get") {
                            const data = parsedContent.data;
                            const itemCount = parsedContent.item_count || 0;
                            responseText = `✅ **${toolArgs.resource_type.toUpperCase()} Status**\n\n`;
                            responseText += `🔍 Namespace: ${parsedContent.namespace}\n`;
                            responseText += `📊 Found: ${itemCount} ${toolArgs.resource_type}\n`;
                            responseText += `🕐 Retrieved: ${new Date(parsedContent.timestamp).toLocaleTimeString()}\n`;
                            
                            if (parsedContent.cached) {
                                responseText += `💾 **Cached result** (performance optimization)\n`;
                                cached = true;
                            }
                            
                            responseText += `\n🔧 **MCP Protocol:** Executed via real MCP server with RBAC validation`;
                        } else if (toolName === "prometheus_query") {
                            responseText = `📊 **System Metrics**\n\n`;
                            responseText += `Query: ${parsedContent.query}\n`;
                            responseText += `Time Range: ${parsedContent.time_range}\n`;
                            if (parsedContent.data && parsedContent.data.result) {
                                responseText += `Data Points: ${parsedContent.data.result.length}\n`;
                            }
                            responseText += `\n💾 Real Prometheus data via MCP protocol`;
                        } else if (toolName === "logs_search") {
                            responseText = `📋 **Log Search Results**\n\n`;
                            responseText += `Query: ${parsedContent.query}\n`;
                            responseText += `Namespace: ${parsedContent.namespace}\n`;
                            responseText += `Lines: ${parsedContent.total_lines || 0}\n`;
                            responseText += `\n🔍 Real kubectl logs via MCP protocol`;
                        } else if (toolName === "system_context") {
                            responseText = `🎯 **System Context**\n\n`;
                            if (parsedContent.server_stats) {
                                const stats = parsedContent.server_stats;
                                responseText += `Session: ${parsedContent.session_id}\n`;
                                responseText += `Cache Size: ${stats.cache_size}\n`;
                                responseText += `Active Users: ${stats.active_users ? stats.active_users.length : 0}\n`;
                                responseText += `Available Tools: ${stats.tools_available}\n`;
                                responseText += `\nServer Version: ${parsedContent.server_version || '1.0.0'}\n`;
                                responseText += `Protocol: ${parsedContent.protocol_version || '2024-11-05'}`;
                            }
                        }
                    } else {
                        responseText = `❌ **Error**: ${parsedContent.error}\n\n🔐 This may be due to RBAC restrictions for user '${getCurrentUser()}'`;
                    }
                }

                return {
                    text: responseText,
                    toolUsed: toolName,
                    cached: cached
                };
            }
        }
        
        const mcpClient = new MCPWebClient();
        
        // UI Functions
        function updateServerStatus(connected) {
            const indicator = document.getElementById('statusIndicator');
            const text = document.getElementById('statusText');
            const input = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');
            
            if (connected) {
                indicator.className = 'status-indicator status-online';
                text.textContent = 'MCP Server Online';
                input.disabled = false;
                sendBtn.disabled = false;
                input.placeholder = "Ask about your Kubernetes cluster...";
            } else {
                indicator.className = 'status-indicator status-offline';
                text.textContent = 'Server Offline';
                input.disabled = true;
                sendBtn.disabled = true;
                input.placeholder = "Connect to MCP server first...";
            }
        }
        
        function updateToolsList(tools) {
            const toolsList = document.getElementById('toolsList');
            
            if (tools.length === 0) {
                toolsList.innerHTML = '<div class="loading"><div class="spinner"></div>Loading tools...</div>';
                return;
            }
            
            toolsList.innerHTML = tools.map(tool => `
                <div class="tool-item" onclick="insertToolExample('${tool.name}')">
                    <div class="tool-name">${tool.name}</div>
                    <div class="tool-desc">${tool.description}</div>
                </div>
            `).join('');
        }
        
        function addMessage(role, content, toolUsed = null, cached = false) {
            const messagesContainer = document.getElementById('chatMessages');
            const messageElement = document.createElement('div');
            messageElement.className = `message ${role}`;
            
            let avatar = '👤';
            if (role === 'assistant') avatar = '🤖';
            if (role === 'system') avatar = '⚙️';
            
            let extraInfo = '';
            if (toolUsed) {
                extraInfo += `<br><small style="opacity: 0.7;">🔧 Tool: <code>${toolUsed}</code></small>`;
                sessionStats.toolsUsed++;
            }
            if (cached) {
                extraInfo += `<br><small style="opacity: 0.7;">💾 Cached result</small>`;
                sessionStats.cacheHits++;
            }
            
            // Format content with markdown-style formatting
            content = content
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\n/g, '<br>');
            
            messageElement.innerHTML = `
                <div class="message-avatar">${avatar}</div>
                <div class="message-content">
                    ${content}
                    ${extraInfo}
                </div>
            `;
            
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            messageHistory.push({ role, content, timestamp: new Date() });
            updateMessageCount();
            updateSessionStats();
        }
        
        function updateMessageCount() {
            const count = messageHistory.length;
            document.getElementById('messageCount').textContent = `${count} messages`;
        }
        
        function updateSessionStats() {
            document.getElementById('toolsUsed').textContent = sessionStats.toolsUsed;
            document.getElementById('cacheHits').textContent = sessionStats.cacheHits;
            document.getElementById('errorCount').textContent = sessionStats.errorCount;
            
            const elapsed = Math.floor((new Date() - sessionStartTime) / 1000);
            const minutes = Math.floor(elapsed / 60).toString().padStart(2, '0');
            const seconds = (elapsed % 60).toString().padStart(2, '0');
            document.getElementById('sessionTime').textContent = `${minutes}:${seconds}`;
        }
        
        function getCurrentUser() {
            return document.getElementById('userSelect').value;
        }
        
        function getCurrentNamespace() {
            return document.getElementById('namespaceSelect').value;
        }
        
        function updateContextDisplay() {
            document.getElementById('currentUser').textContent = getCurrentUser();
            document.getElementById('currentNamespace').textContent = getCurrentNamespace();
        }
        
        // Event Handlers
        async function connectServer() {
            try {
                const success = await mcpClient.connect();
                
                if (success) {
                    serverConnected = true;
                    updateServerStatus(true);
                    updateToolsList(mcpClient.tools);
                    addMessage('system', 
                        '✅ Connected to MCP server successfully!\n\n' +
                        `Tools discovered: ${mcpClient.tools.length}\n` +
                        'Protocol: JSON-RPC 2.0\n' +
                        'Kubernetes: v1.30.0 | Kind: v0.23.0\n' +
                        'Real kubectl/prometheus integration active'
                    );
                } else {
                    throw new Error('Connection failed');
                }
            } catch (error) {
                sessionStats.errorCount++;
                addMessage('system', '❌ Failed to connect: ' + error.message);
                updateServerStatus(false);
                updateSessionStats();
            }
        }
        
        function disconnectServer() {
            mcpClient.disconnect();
            serverConnected = false;
            updateServerStatus(false);
            updateToolsList([]);
            addMessage('system', '🔌 Disconnected from MCP server');
        }
        
        function clearChat() {
            const messagesContainer = document.getElementById('chatMessages');
            messagesContainer.innerHTML = '';
            messageHistory = [];
            updateMessageCount();
            addMessage('system', 'Chat cleared. Session statistics preserved.');
        }
        
        function showContext() {
            const message = 'Show current system context and session information';
            document.getElementById('messageInput').value = message;
            sendMessage();
        }
        
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            if (!message || !serverConnected) return;
            
            // Add user message
            addMessage('user', message);
            input.value = '';
            
            // Show loading
            const loadingElement = document.createElement('div');
            loadingElement.className = 'message assistant';
            loadingElement.id = 'loadingMessage';
            loadingElement.innerHTML = `
                <div class="message-avatar">🤖</div>
                <div class="message-content">
                    <div class="spinner" style="width: 20px; height: 20px; display: inline-block; vertical-align: middle;"></div>
                    Executing MCP tools...
                </div>
            `;
            document.getElementById('chatMessages').appendChild(loadingElement);
            document.getElementById('chatMessages').scrollTop = document.getElementById('chatMessages').scrollHeight;
            
            try {
                // Send to real MCP server
                const response = await mcpClient.sendMessage(message);
                
                // Remove loading
                document.getElementById('loadingMessage')?.remove();
                
                // Add real response
                addMessage('assistant', response.text, response.toolUsed, response.cached);
                
            } catch (error) {
                document.getElementById('loadingMessage')?.remove();
                sessionStats.errorCount++;
                addMessage('system', '❌ Error: ' + error.message);
                updateSessionStats();
            }
        }
        
        function insertToolExample(toolName) {
            const examples = {
                'kubernetes_get': 'Show me all pods in the monitoring namespace',
                'kubernetes_apply': 'Apply a deployment manifest with dry-run',
                'prometheus_query': 'What is the current CPU usage?',
                'logs_search': 'Search for error logs in the last hour',
                'system_context': 'Show system context and session stats'
            };
            
            const input = document.getElementById('messageInput');
            input.value = examples[toolName] || `Use the ${toolName} tool`;
            input.focus();
        }
        
        function runDemo(demoType) {
            const demos = {
                'cluster-health': 'Check nodes in the cluster',
                'pod-status': 'Show me all pods in the monitoring namespace',
                'system-metrics': 'Display current system metrics from Prometheus',
                'rbac-demo': 'Show me what different user roles can access',
                'tool-discovery': 'Show system context and available MCP tools'
            };
            
            const input = document.getElementById('messageInput');
            input.value = demos[demoType];
            
            // Automatically send the message if connected
            if (serverConnected) {
                sendMessage();
            } else {
                input.focus();
                addMessage('system', '⚠️ Connect to MCP server first to run demos');
            }
        }
        
        // Event Listeners
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });
        
        document.getElementById('userSelect').addEventListener('change', updateContextDisplay);
        document.getElementById('namespaceSelect').addEventListener('change', updateContextDisplay);
        
        // Update session timer every second
        setInterval(updateSessionStats, 1000);
        
        // Initialize
        updateServerStatus(false);
        updateContextDisplay();
        updateMessageCount();
        updateSessionStats();
        
        // Auto-connect on page load after a short delay
        setTimeout(() => {
            if (!serverConnected) {
                connectServer();
            }
        }, 1000);
    </script>
</body>
</html>
